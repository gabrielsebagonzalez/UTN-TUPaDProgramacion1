"""1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros entre 1 y el n√∫mero que indique el usuario"""

def factorial(num):
    if num == 0 or num == 1:
        return 1
    else:
        return num * factorial(num - 1)
    

num = int(input("Ingrese un n√∫mero entero positivo: "))

print(f"Factoriales del 1 al {num}")

for i in range(1, num + 1):
    print(f"{i}! = {factorial(i)}")

"""2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique."""

def fibonacci(posicion):
    if posicion == 0:
        return 0
    elif posicion == 1:
        return 1
    else:
        return fibonacci(posicion - 1) + fibonacci(posicion - 2)
    
num = int(input("Ingrese la cantidad de posisciones de la serie de Fibonacci: "))

print(f"\nSerie de Fibonacci hasta la posici√≥n {num}")

for i in range(num):
    print(f"Posici√≥n {i}: {fibonacci(i)}")

"""3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente, utilizando la f√≥rmula ùëõùëö= ùëõ‚àóùëõ(ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general."""

def potencia(base, exponente):
    if exponente == 0:
        return 1
    else:
        return base * potencia(base, exponente - 1)
    
def main():
    base = int(input("Ingrese la base: "))
    exponente = int(input("Ingrese el exponente: "))
    resultado = potencia(base, exponente)
    print(f"{base} elevado a {exponente} es igual a {resultado}")

main()


"""4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal y devuelva su representaci√≥n en binario como una cadena de texto.
Cuando representamos un n√∫mero en binario, lo expresamos usando solamente ceros (0) y unos (1), en base 2. Para convertir un n√∫mero decimal a binario, se puede seguir este procedimiento:
1. Dividir el n√∫mero por 2.
2. Guardar el resto (0 o 1).
3. Repetir el proceso con el cociente hasta que llegue a 0.
4. Los restos obtenidos, le√≠dos de abajo hacia arriba, forman el n√∫mero binario.
Convertir el n√∫mero 10 a binario:
10 √∑ 2 = 5 resto: 0
5 √∑ 2 = 2 resto: 1
2 √∑ 2 = 1 resto: 0
1 √∑ 2 = 0 resto: 1
Leyendo los restos de abajo hacia arriba: 1 0 1 0 ‚Üí El resultado binario es "1010"."""

def decimal_a_binario(num):
    if num < 2:
        return str(num)
    else:
        return decimal_a_binario(num // 2) + str(num % 2)
    
def main():
    numero = int(input("Ingrese un n√∫mero entero positivo: "))
    if numero < 0:
        print("Debe ingresar un n√∫mero entero positivo")
    else:
        binario = decimal_a_binario(numero)
        print(f"El n√∫mero {numero} en binario es {binario}")

main()


"""5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no lo es.
Requisitos:
La soluci√≥n debe ser recursiva.
No se debe usar [::-1] ni la funci√≥n reversed()."""

def es_palindromo(palabra):
    if len(palabra) <= 1:
        return True
    
    if palabra[0] == palabra[-1]:
        return es_palindromo(palabra[1:-1])
    
    else:
        return False
    
def main():
    palabra = input("Ingrese una palabra sin espacios ni tildes: ").lower()
    if es_palindromo(palabra):
        print(f"{palabra} es un pal√≠ndromo")
    else:
        print(f"{palabra} no es un pal√≠ndromo")

main()


"""6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos.
Restricciones:
No se puede convertir el n√∫mero a string.
Us√° operaciones matem√°ticas (%, //) y recursi√≥n.
Ejemplos:
suma_digitos(1234) ‚Üí 10 (1 + 2 + 3 + 4)
suma_digitos(9) ‚Üí 9
suma_digitos(305) ‚Üí 8 (3 + 0 + 5)"""


def suma_digitos(num):
    if num < 10:
        return num
    else:
        return (num % 10) + suma_digitos(num // 10)
    
def main():
    numero = int(input("Ingrese un n√∫mero entero positivo: "))
    if numero < 0:
        print("Debe ingresar un n√∫mero entero positivo")
    else:
        resultado = suma_digitos(numero)
        print(f"La suma de los d√≠gitos de {numero} es {resultado}")

main()


"""7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al √∫ltimo nivel con un solo bloque.
Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la pir√°mide.
Ejemplos:
contar_bloques(1) ‚Üí 1 (1)
contar_bloques(2) ‚Üí 3 (2 + 1)
contar_bloques(4) ‚Üí 10 (4 + 3 + 2 + 1)"""

def contar_bloques(num):
    if num == 1:
        return 1
    else:
        return num + contar_bloques(num - 1)
    
def main():
    numero = int(input("Ingrese la cantidad de bloques del nivel m√°s bajo: "))
    if numero < 1:
        print("Debe ingresar un n√∫mero entero positivo")
    else:
        total = contar_bloques(numero)
        print(f"Para construir la pir√°mide con base {numero} bloques, se necesitan {total} bloques")

main()


"""8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces aparece ese d√≠gito dentro del n√∫mero.
Ejemplos:
contar_digito(12233421, 2) ‚Üí 3
contar_digito(5555, 5) ‚Üí 4
contar_digito(123456, 7) ‚Üí 0"""

def contar_digito(numero, digito):
    if numero < 10:
        return 1 if numero == digito else 0
    else:
        ultimo = numero % 10
        return (1 if ultimo == digito else 0) + contar_digito(numero // 10, digito)
    
def main():
    numero = int(input("Ingrese un n√∫mero entero positivo: "))
    digito = int(input("Ingrese el d√≠gito a contar (0-9): "))

    if numero < 0 or digito < 0 or digito > 9:
        print("Debe ingresar un n√∫mero y d√≠gitos v√°lidos.")
    else:
        cantidad = contar_digito(numero, digito)
        print(f"El d√≠gito {digito} aparece {cantidad} veces en el n√∫mero {numero}.")
    
main()